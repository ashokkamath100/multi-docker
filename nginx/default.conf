# sets up the definition of an upstream server called client
# 
upstream client {
    # we say that client refers to a server hosted at 
    # client:3000 which is the 'client' docker service 
    # specified in docker-compose file
    server client:3000;
}

# we were originally going to set a definition for server
# but nginx might use server as a keyword so instead we 
# call it api

upstream api {
    # use the server hosted by the docker service 
    # api, which is listening on port 5000, which was 
    # specified in the express script
    server api:5000; 
}

server {
    # telling nginx we want it to set up its own server
    # that listens on port 80
    listen 80; 

    # create routing rule at '/' route.
    # If someone tries to access '/' route, then
    # serve as a proxy and pass the request to the
    # upstream client server
    location / {
        proxy_pass http://client;
    }

    location /ws {
      proxy_pass http://client;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }

    location /api {
        # since we want to cut off the 'api' part of the route
        # we need to use a regex inside a rewrite statement
        # so /api/(.*) refers to the part after the api part of the 
        # route and /$1 uses the part that it found via regex and 
        # uses that as the new route to pass on to the api server.
        # break is a directive that says not to apply any other rewrite rules
        # after applying this one 
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api; 
    }
}

